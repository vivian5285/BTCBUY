// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
  FAILED
}

enum PaymentMethod {
  wallet
  credit_card
  bank_transfer
}

enum CommissionStatus {
  PENDING
  PAID
  FAILED
}

enum ContentType {
  VIDEO
  IMAGE
  TEXT
}

enum ContentStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum GroupBuyStatus {
  PENDING
  SUCCESS
  FAILED
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum CouponStatus {
  ACTIVE
  USED
  EXPIRED
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  password         String
  name             String?
  avatar           String?
  phone            String?
  role             UserRole           @default(USER)
  status           UserStatus         @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // 通知关系
  notifications    Notification[]     @relation("UserNotifications")
  notificationPreferences NotificationPreference?
  
  // 推荐关系
  referralsAsReferrer ReferralRelation[] @relation("ReferralFrom")
  referralsAsReferred ReferralRelation[] @relation("ReferralTo")
  
  // 订单关系
  orders          Order[]
  
  // 团购关系
  initiatedGroupBuys GroupBuy[]      @relation("GroupBuyInitiator")
  groupParticipations GroupParticipant[]
  createdGroups    Group[]           @relation("GroupCreator")
  
  // 优惠券关系
  coupons         Coupon[]
  
  // 提现请求关系
  withdrawalRequests WithdrawalRequest[]
  
  // 店铺关系
  ownedStores    Store[]            @relation("UserStores")
  
  // 商品关系
  ownedProducts  Product[]
  
  // 商家关系
  merchant       Merchant?
  
  // 会话关系
  sessions       Session[]
  
  // 安全操作关系
  sensitiveOperations SensitiveOperation[]
  
  // 安全日志关系
  securityLogs   SecurityLog[]
  
  // 佣金关系
  commissionsFrom ReferralCommission[] @relation("CommissionFromUser")
  commissionsTo   ReferralCommission[] @relation("CommissionToUser")
  
  // 直播相关关系
  lives          Live[]              @relation("UserLives")
  liveComments   LiveComment[]       @relation("UserLiveComments")
  liveLikes      LiveLike[]         @relation("UserLiveLikes")
  liveNotifications LiveNotification[]
  liveInteractions LiveInteractionData[]
  lotteryEntries LiveLotteryEntry[]
  
  // 物流通知关系
  logisticsNotifications LogisticsNotification[] @relation("UserLogisticsNotifications")
  
  // 交易关系
  transactions   Transaction[]
  deposits      Deposit[]
  
  // 收藏关系
  favorites     Favorite[]
  
  // 点赞关系
  likes        Like[]
  
  // 评论关系
  comments     Comment[]
  
  // 店铺关注关系
  storeFollows StoreFollow[]
  
  // 支付交易关系
  paymentTransactions PaymentTransaction[]
  
  // 商品浏览记录
  productViews ProductView[]
  
  // 购买历史
  purchaseHistory PurchaseHistory[]
  
  // 用户偏好
  preference UserPreference?
  
  // 内容创作者
  contentCreator ContentCreator?

  @@index([phone])
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String // "buy" or "sell"
  amount    Float
  price     Float
  status    String // "pending", "completed", "cancelled"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int      @default(0)
  images      String[]
  status      String   @default("active") // active, inactive
  userId      String   @db.ObjectId
  storeId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  store       Store    @relation(fields: [storeId], references: [id])
  orders      Order[]  @relation("ProductOrders")
  favorites   Favorite[]
  likes       Like[]
  comments    Comment[]
  videos      Video[]
  views       ProductView[]
  groupBuys   GroupBuy[] @relation("ProductGroupBuys")
  groups      Group[]    @relation("ProductGroups")
  purchaseHistory PurchaseHistory[]
  liveProducts LiveProduct[] @relation("ProductLives")
  flashSales  FlashSale[]
  liveSalesData LiveSalesData[]
  analytics   ProductAnalytics?
  orderItems  OrderItem[]
  contentProducts ContentProduct[]

  @@index([userId])
  @@index([storeId])
  @@index([status])
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  groupBuyId  String?  @db.ObjectId
  couponId    String?  @unique @db.ObjectId
  quantity    Int
  amount      Float
  status      String   @default("pending") // pending, paid, cancelled, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation("ProductOrders", fields: [productId], references: [id])
  groupBuy  GroupBuy? @relation("GroupBuyOrders", fields: [groupBuyId], references: [id])
  coupon    Coupon? @relation("OrderCoupon", fields: [couponId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments  PaymentTransaction[]
  logistics OrderLogistics[]
  items     OrderItem[]

  creatorCommissions  CreatorCommission[]
  referralCommissions ReferralCommission[]

  @@index([userId])
  @@index([productId])
  @@index([groupBuyId])
  @@index([status])
}

model Commission {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId    String    @db.ObjectId
  toUserId      String    @db.ObjectId
  orderId       String    @db.ObjectId
  amount        Float
  type          String
  status        CommissionStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

model Deposit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  chain     String // trc / bsc / arb / op / eth
  amount    Float
  txHash    String   @unique
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model GroupBuy {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  productId     String    @db.ObjectId
  product       Product   @relation("ProductGroupBuys", fields: [productId], references: [id])
  initiatorId   String    @db.ObjectId
  initiator     User      @relation("GroupBuyInitiator", fields: [initiatorId], references: [id])
  minMembers    Int
  maxMembers    Int
  currentMembers Int      @default(1)
  groupPrice    Float
  status        String    @default("pending") // pending, success, failed
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isHandled     Boolean   @default(false)
  
  participants  GroupParticipant[]
  orders       Order[]    @relation("GroupBuyOrders")

  @@index([productId])
  @@index([initiatorId])
  @@index([status])
  @@index([expiresAt])
}

model GroupParticipant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  groupId   String   @db.ObjectId
  group     GroupBuy @relation(fields: [groupId], references: [id])
  groupMembership Group? @relation("GroupMembers", fields: [groupId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model Store {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  logo          String?
  ownerId       String    @db.ObjectId
  owner         User      @relation("UserStores", fields: [ownerId], references: [id])
  walletAddress String?   // 商家钱包地址
  products      Product[]
  followers     StoreFollow[]
  status        String    @default("pending") // pending | approved | rejected
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([ownerId])
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  groupSize Int
  price     Float
  status    String   @default("pending") // pending, success, failed
  shareCode String   @unique
  expiresAt DateTime
  isHandled Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator  User    @relation("GroupCreator", fields: [userId], references: [id])
  product Product @relation("ProductGroups", fields: [productId], references: [id])
  members  GroupParticipant[] @relation("GroupMembers")

  @@index([userId])
  @@index([productId])
  @@index([status])
  @@index([expiresAt])
}

model Coupon {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  amount        Float
  status        String    @default("active") // active, used, expired
  orderId       String?   @unique @db.ObjectId
  order         Order?    @relation("OrderCoupon")
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model StoreFollow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, storeId])
  @@index([storeId])
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId // 上传视频的商家
  title       String
  description String?
  videoUrl    String // 视频 URL
  thumbnail   String // 视频封面图
  productId   String?  @db.ObjectId // 关联商品
  product     Product? @relation(fields: [productId], references: [id])
  status      String   @default("pending") // pending, approved, rejected
  likes       Int      @default(0)
  comments    Int      @default(0)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Live {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String?
  streamUrl           String
  status              String                @default("pending") // pending, live, ended
  userId              String                @db.ObjectId
  user                User                  @relation("UserLives", fields: [userId], references: [id])
  products            LiveProduct[]         @relation("LiveProducts")
  viewers             Int                   @default(0)
  likes               Int                   @default(0)
  comments            LiveComment[]         @relation("LiveComments")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  liveLikes           LiveLike[]            @relation("LiveLikes")
  luckyBags           LiveLuckyBag[]        @relation("LiveLuckyBags")
  luckyBagEntries     LiveLuckyBagEntry[]   @relation("LiveLuckyBagEntries")
  lotteries           LiveLottery[]         @relation("LiveLotteries")
  FlashSale           FlashSale[]
  LiveNotification    LiveNotification[]
  LiveSalesData       LiveSalesData[]
  LiveInteractionData LiveInteractionData[]
}

model LiveProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  liveId    String   @db.ObjectId
  productId String   @db.ObjectId
  price     Float
  createdAt DateTime @default(now())

  live      Live     @relation("LiveProducts", fields: [liveId], references: [id])
  product   Product  @relation("ProductLives", fields: [productId], references: [id])

  @@unique([liveId, productId])
  @@index([liveId])
  @@index([productId])
}

model LiveComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  liveId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  user User @relation("UserLiveComments", fields: [userId], references: [id])
  live Live @relation("LiveComments", fields: [liveId], references: [id])
}

model LiveLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  liveId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation("UserLiveLikes", fields: [userId], references: [id])
  live Live @relation("LiveLikes", fields: [liveId], references: [id])

  @@unique([userId, liveId])
}

model LiveLuckyBag {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  liveId     String              @db.ObjectId
  type       String // 奖品类型: coupon(优惠券), gift(实物), points(积分), discount(折扣券), cash(现金红包)
  total      Int // 总数量
  claimed    Int                 @default(0) // 已领取数量
  expiredAt  DateTime
  rewardDesc String // 奖品描述
  winners    String[] // 中奖用户ID列表
  winRate    Float               @default(0.5) // 中奖概率(0-1)
  minAmount  Float? // 最小金额(用于现金红包)
  maxAmount  Float? // 最大金额(用于现金红包)
  discount   Float? // 折扣率(用于折扣券)
  points     Int? // 积分数量(用于积分奖励)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  live       Live                @relation("LiveLuckyBags", fields: [liveId], references: [id])
  entries    LiveLuckyBagEntry[] @relation("LuckyBagEntries")

  @@index([liveId])
}

model LiveLuckyBagEntry {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  liveId     String       @db.ObjectId
  userId     String       @db.ObjectId
  luckyBagId String       @db.ObjectId
  createdAt  DateTime     @default(now())
  live       Live         @relation("LiveLuckyBagEntries", fields: [liveId], references: [id])
  luckyBag   LiveLuckyBag @relation("LuckyBagEntries", fields: [luckyBagId], references: [id])
}

model LiveLottery {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  liveId    String             @db.ObjectId
  title     String
  type      String // 抽奖类型：普通抽奖、限时抽奖
  quantity  Int // 中奖数量
  status    String // pending, running, ended
  startTime DateTime
  endTime   DateTime
  winners   String[]           @default([]) // 中奖用户ID列表
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  live      Live               @relation("LiveLotteries", fields: [liveId], references: [id])
  entries   LiveLotteryEntry[] @relation("LotteryEntries")
}

model LiveLotteryEntry {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  lotteryId String      @db.ObjectId
  userId    String      @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  lottery   LiveLottery @relation("LotteryEntries", fields: [lotteryId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model FlashSale {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  liveId        String   @db.ObjectId
  flashPrice    Float
  quantity      Int
  soldQuantity  Int      @default(0)
  startTime     DateTime
  endTime       DateTime
  status        String   @default("pending") // pending, active, ended
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product       Product  @relation(fields: [productId], references: [id])
  live          Live     @relation(fields: [liveId], references: [id])

  @@index([productId])
  @@index([liveId])
  @@index([status])
  @@index([startTime])
  @@index([endTime])
}

model LiveNotification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  liveId    String   @db.ObjectId
  type      String // lottery_winner, order_placed, flash_sale
  content   String
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  live      Live     @relation(fields: [liveId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model LiveSalesData {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  liveId      String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int      @default(0)
  amount      Float    @default(0)
  createdAt   DateTime @default(now())

  live        Live     @relation(fields: [liveId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@index([liveId])
  @@index([productId])
}

model LiveInteractionData {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  liveId         String   @db.ObjectId
  userId         String   @db.ObjectId
  likes          Int // 点赞次数
  comments       Int // 评论次数
  lotteryEntries Int // 参与抽奖次数
  createdAt      DateTime @default(now())
  live           Live     @relation(fields: [liveId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model PaymentTransaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  orderId       String   @db.ObjectId
  amount        Float
  currency      String
  status        String // 'pending', 'completed', 'failed'
  paymentUrl    String // 支付链接（可用于重试支付）
  paymentMethod String // 'USDT'
  txHash        String? // 交易哈希
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

model OrderLogistics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  shippingCompany String
  trackingNumber  String
  status          String   @default("pending") // pending, shipped, delivered
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  order           Order    @relation(fields: [orderId], references: [id])
  trackingRecords TrackingRecord[]
  notifications   LogisticsNotification[]

  @@index([orderId])
  @@index([status])
}

model TrackingRecord {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  logisticsId String         @db.ObjectId
  logistics   OrderLogistics @relation(fields: [logisticsId], references: [id])
  location    String
  status      String
  description String?
  timestamp   DateTime       @default(now())

  @@index([logisticsId])
}

model LogisticsNotification {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  logisticsId String         @db.ObjectId
  logistics   OrderLogistics @relation(fields: [logisticsId], references: [id])
  userId      String         @db.ObjectId
  user        User           @relation("UserLogisticsNotifications", fields: [userId], references: [id])
  type        String // status_update, delivery_attempt, exception
  message     String
  isRead      Boolean        @default(false)
  createdAt   DateTime       @default(now())

  @@index([logisticsId])
  @@index([userId])
}

model ShippingCompany {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // 物流公司名称
  code        String   @unique // 物流公司代码
  website     String? // 物流公司官网
  trackingUrl String? // 物流查询链接
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  viewedAt  DateTime @default(now())
  duration  Int      @default(0) // 浏览时长（秒）
  source    String? // 来源（首页、搜索、推荐等）

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model PurchaseHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  boughtAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model ProductAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId @unique
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  sales       Int      @default(0)
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([views])
  @@index([sales])
  @@index([revenue])
}

model UserPreference {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId @unique
  theme       String   @default("light")
  language    String   @default("zh")
  currency    String   @default("CNY")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ContentCreator {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  userId            String              @db.ObjectId @unique
  user              User                @relation(fields: [userId], references: [id])
  contents          Content[]
  commissions       CreatorCommission[]
  bio               String?
  followers         Int                 @default(0)
  verified          Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([followers])
}

model Content {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        ContentType
  status      ContentStatus @default(DRAFT)
  creatorId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     ContentCreator @relation(fields: [creatorId], references: [id])
  products    ContentProduct[]

  @@index([creatorId])
  @@index([status])
}

model ContentProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId   String   @db.ObjectId
  productId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content     Content  @relation(fields: [contentId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@index([contentId])
  @@index([productId])
}

model CreatorCommission {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  creatorId String           @db.ObjectId
  creator   ContentCreator   @relation(fields: [creatorId], references: [id])
  orderId   String           @db.ObjectId
  order     Order            @relation(fields: [orderId], references: [id])
  amount    Float
  status    CommissionStatus
  txHash    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([creatorId])
  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

model ReferralRelation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId  String   @db.ObjectId
  toUserId    String   @db.ObjectId
  level       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fromUser    User     @relation("ReferralFrom", fields: [fromUserId], references: [id])
  toUser      User     @relation("ReferralTo", fields: [toUserId], references: [id])
  commissions ReferralCommission[]

  @@unique([fromUserId, toUserId])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([level])
}

model ReferralCommission {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId String          @db.ObjectId
  fromUser  User             @relation("CommissionFromUser", fields: [fromUserId], references: [id])
  toUserId  String          @db.ObjectId
  toUser    User             @relation("CommissionToUser", fields: [toUserId], references: [id])
  orderId   String           @db.ObjectId
  order     Order            @relation(fields: [orderId], references: [id])
  amount    Float
  status    CommissionStatus
  txHash    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  referralRelation ReferralRelation @relation(fields: [fromUserId, toUserId], references: [fromUserId, toUserId])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

model WithdrawalRequest {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  amount        Float
  status        String    @default("pending")
  txHash        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  preference NotificationPreference? @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([createdAt])
}

model NotificationPreference {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  email     Boolean  @default(true)
  sms       Boolean  @default(false)
  system    Boolean  @default(true)
  websocket Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  notifications Notification[]
}

model Merchant {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  status        String   @default("pending") // pending, approved, rejected
  businessName  String
  contactPerson String
  phoneNumber   String
  email         String
  address       String?
  documents     String[] // 营业执照等文件URL
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WithdrawalSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chain     String // 链名称(trc/bsc/arb/op/eth)
  minAmount Float // 最小提现金额
  maxAmount Float // 最大提现金额
  fee       Float // 提现手续费
  feeType   String // percentage(百分比) | fixed(固定金额)
  status    String   @default("active") // active | inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chain])
}

model CommissionRule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String // user_order | merchant_order | creator_order
  level       Int // 佣金等级
  rate        Float // 佣金比例
  description String? // 规则描述
  status      String   @default("active") // active | inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([type, level])
}

model TokenBlacklist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  reason    String?
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  token         String
  deviceInfo    String?
  ipAddress     String?
  lastActivity  DateTime @default(now())
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@unique([token])
  @@index([userId])
  @@index([expiresAt])
}

model DeviceBlacklist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fingerprint String   @unique
  reason      String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
}

model SensitiveOperation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  operation   String
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([operation])
  @@index([expiresAt])
}

model IPBlacklist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress   String   @unique
  reason      String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
}

model SecurityLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId
  ipAddress   String?
  action      String
  details     String?
  status      String
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])
  alerts      SecurityAlert[]

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model SecurityConfig {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  maxLoginAttempts            Int      @default(5)
  loginLockoutDuration        Int      @default(3600000) // 1小时
  sessionTimeout              Int      @default(86400000) // 24小时
  passwordMinLength           Int      @default(8)
  requireTwoFactor            Boolean  @default(false)
  requireDeviceVerification   Boolean  @default(true)
  maxConcurrentSessions       Int      @default(3)
  sensitiveOperationVerification Boolean @default(true)
  ipBlacklistDuration         Int      @default(604800000) // 7天
  logRetentionDays            Int      @default(30)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model AlertRule {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  type                String        // LOGIN_ATTEMPT, SENSITIVE_OPERATION, IP_BLOCK, DEVICE_BLOCK, CONCURRENT_SESSION
  threshold           Int
  timeWindow          Int          // 时间窗口（分钟）
  severity            String        // LOW, MEDIUM, HIGH, CRITICAL
  enabled             Boolean       @default(true)
  notificationChannels String[]     // EMAIL, SMS, SYSTEM
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  alerts              SecurityAlert[]
}

model SecurityAlert {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  ruleId    String     @db.ObjectId
  rule      AlertRule  @relation(fields: [ruleId], references: [id])
  type      String
  severity  String
  details   String
  status    String     // ACTIVE, RESOLVED, IGNORED
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  securityLogId String? @db.ObjectId
  securityLog SecurityLog? @relation(fields: [securityLogId], references: [id])

  @@index([ruleId])
  @@index([securityLogId])
  @@index([status])
  @@index([createdAt])
}
